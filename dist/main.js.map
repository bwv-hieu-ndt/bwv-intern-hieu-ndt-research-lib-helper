{"version":3,"sources":["../src/main.ts","../src/api/user/user_route.ts","../src/database/models/user.ts","../src/database/connection.ts","../src/api/user/user_service.ts","../src/api/user/user_controller.ts"],"sourcesContent":["import express from 'express';\r\nimport UserRoute from './api/user/user_route';\r\n\r\nconst boostrap = async () => {\r\n\r\n  const app = express();\r\n  const port = 8080;\r\n\r\n  const userRoute = new UserRoute()\r\n\r\n  app.use('/', userRoute.router);\r\n\r\n  app.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`)\r\n  })\r\n} \r\n\r\nboostrap()","// import UserController from \"../../controller/use_controller/user_controller\";\r\nimport express from 'express';\r\nimport UserController from './user_controller';\r\n\r\nclass UserRoute {\r\n  public path = '/users';\r\n  public router = express.Router();\r\n  public userController = new UserController();\r\n\r\n  constructor() {\r\n    this.initializeRoutes();\r\n  }\r\n\r\n  private initializeRoutes() {\r\n    this.router\r\n      .route(`${this.path}`)\r\n      .get(this.userController.getAllUser)\r\n      .post(this.userController.createUser);\r\n  }\r\n}\r\n\r\nexport default UserRoute;","import { Model, DataTypes } from 'sequelize';\nimport connection from '../connection';\n\nexport interface UserAttributes {\n  id?: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n\n  updatedAt?: Date;\n  deletedAt?: Date;\n  createdAt?: Date;\n}\n\nclass UserModel extends Model<UserAttributes> implements UserAttributes {\n  public id!: number;\n  public firstName!: string;\n  public lastName!: string;\n  public email!: string;\n  public password!: string;\n\n  public readonly updatedAt!: Date;\n  public readonly deletedAt!: Date;\n  public readonly createdAt!: Date;\n}\n\nUserModel.init({\n    id: {\n      allowNull: false,\n      autoIncrement: true,\n      primaryKey: true,\n      type: DataTypes.INTEGER\n    },\n    firstName: {\n      type: DataTypes.STRING\n    },\n    lastName: {\n      type: DataTypes.STRING\n    },\n    email: {\n      type: DataTypes.STRING\n    },\n    password: {\n      type: DataTypes.STRING\n    },\n    createdAt: {\n      allowNull: false,\n      type: DataTypes.DATE\n    },\n    updatedAt: {\n      allowNull: false,\n      type: DataTypes.DATE\n    },\n  },\n  {\n    sequelize: connection,\n    modelName: 'User',\n  }\n);\n\n// associate\n// Todo.belongsTo(User, {\n//   as: 'user',\n//   foreignKey: {\n//     name: 'user_id',\n//     allowNull: false,\n//   },\n//   foreignKeyConstraint: true,\n// });\n\nexport default UserModel;","import { Sequelize } from 'sequelize';\r\nimport { DB_NAME, DB_HOST, DB_PASSWORD, DB_USERNAME } from '../configs';\r\n\r\nlet sequelizeConnection: Sequelize = new Sequelize('prepare', 'root', 'root', {\r\n  host: '127.0.0.1',\r\n  dialect: 'mysql',\r\n  port: 3306, \r\n});\r\n\r\nexport default sequelizeConnection;\r\n","import UserModel from \"../../database/models/user\"\r\n\r\nclass UserService {\r\n  public async createUser(user: UserModel): Promise<UserModel> {\r\n    const newUser = UserModel.create({\r\n      id: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      password: user.password,\r\n      updatedAt: new Date(),\r\n      deletedAt: new Date(),\r\n      createdAt: new Date(),\r\n    })\r\n    return newUser;\r\n  }\r\n\r\n  public async getAllUser(): Promise<UserModel[]> {\r\n    const users =  await UserModel.findAll()\r\n    return users;\r\n  }\r\n\r\n  public async getUserById(id: number): Promise<UserModel|null> {\r\n    const user =  await UserModel.findOne({ where: { id: id }  })\r\n    return user;\r\n  }\r\n\r\n  public async deleteUser(id: number): Promise<Boolean> {\r\n    const deleteUser =  await UserModel.findOne({ where: { id: id } })    \r\n    if(deleteUser) {\r\n      await deleteUser.destroy();\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default UserService","// import UserService from \"../../services/user/user_service\";\r\nimport { Request, Response } from 'express';\r\nimport UserService from './user_service';\r\n\r\nclass UserController {\r\n  public userService: UserService;\r\n\r\n  constructor() {\r\n    this.userService = new UserService();\r\n  }\r\n\r\n  public async createUser(req: Request, res: Response): Promise<void> {\r\n    const user = req.body;\r\n    try {\r\n      const newUser = await this.userService.createUser(user);\r\n      res.status(201).json(newUser);\r\n    } catch (error: any) {\r\n      res.status(500).json({ error: `Error: ${error.message}` });\r\n    }\r\n  }\r\n  \r\n  public async getAllUser(req: Request, res: Response): Promise<void>{\r\n    try {\r\n      const users = await this.userService.getAllUser();\r\n      res.status(201).json(users);\r\n    } catch (error: any) {\r\n      res.status(500).json({ error: `Error: ${error.message}` });\r\n    }\r\n  }\r\n\r\n  public async getUserById(id: number) {\r\n    try {\r\n      const user = await this.userService.getUserById(id);\r\n      return user;\r\n    } catch (error: any) {\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public async deleteUser(id: number) {\r\n    try {\r\n      const result = await this.userService.deleteUser(id);\r\n      return result;\r\n    } catch (error: any) {\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default UserController"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,kBAAoB;;;ACCpB,qBAAoB;;;ACDpB,IAAAC,oBAAiC;;;ACAjC,uBAA0B;AAG1B,IAAI,sBAAiC,IAAI,2BAAU,WAAW,QAAQ,QAAQ;AAAA,EAC5E,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM;AACR,CAAC;AAED,IAAO,qBAAQ;;;ADMf,IAAM,YAAN,cAAwB,wBAAgD;AAAA,EAC/D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAES;AAAA,EACA;AAAA,EACA;AAClB;AAEA,UAAU;AAAA,EAAK;AAAA,IACX,IAAI;AAAA,MACF,WAAW;AAAA,MACX,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,WAAW;AAAA,MACT,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,UAAU;AAAA,MACR,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,OAAO;AAAA,MACL,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,UAAU;AAAA,MACR,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,WAAW;AAAA,MACT,WAAW;AAAA,MACX,MAAM,4BAAU;AAAA,IAClB;AAAA,IACA,WAAW;AAAA,MACT,WAAW;AAAA,MACX,MAAM,4BAAU;AAAA,IAClB;AAAA,EACF;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,WAAW;AAAA,EACb;AACF;AAYA,IAAO,eAAQ;;;AErEf,IAAM,cAAN,MAAkB;AAAA,EAChB,MAAa,WAAW,MAAqC;AAC3D,UAAM,UAAU,aAAU,OAAO;AAAA,MAC/B,IAAI,KAAK;AAAA,MACT,WAAW,KAAK;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,OAAO,KAAK;AAAA,MACZ,UAAU,KAAK;AAAA,MACf,WAAW,oBAAI,KAAK;AAAA,MACpB,WAAW,oBAAI,KAAK;AAAA,MACpB,WAAW,oBAAI,KAAK;AAAA,IACtB,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,aAAmC;AAC9C,UAAM,QAAS,MAAM,aAAU,QAAQ;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,YAAY,IAAqC;AAC5D,UAAM,OAAQ,MAAM,aAAU,QAAQ,EAAE,OAAO,EAAE,GAAO,EAAG,CAAC;AAC5D,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,WAAW,IAA8B;AACpD,UAAM,aAAc,MAAM,aAAU,QAAQ,EAAE,OAAO,EAAE,GAAO,EAAE,CAAC;AACjE,QAAG,YAAY;AACb,YAAM,WAAW,QAAQ;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AACF;AAEA,IAAO,uBAAQ;;;AChCf,IAAM,iBAAN,MAAqB;AAAA,EACZ;AAAA,EAEP,cAAc;AACZ,SAAK,cAAc,IAAI,qBAAY;AAAA,EACrC;AAAA,EAEA,MAAa,WAAW,KAAc,KAA8B;AAClE,UAAM,OAAO,IAAI;AACjB,QAAI;AACF,YAAM,UAAU,MAAM,KAAK,YAAY,WAAW,IAAI;AACtD,UAAI,OAAO,GAAG,EAAE,KAAK,OAAO;AAAA,IAC9B,SAAS,OAAY;AACnB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,UAAU,MAAM,OAAO,GAAG,CAAC;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,MAAa,WAAW,KAAc,KAA6B;AACjE,QAAI;AACF,YAAM,QAAQ,MAAM,KAAK,YAAY,WAAW;AAChD,UAAI,OAAO,GAAG,EAAE,KAAK,KAAK;AAAA,IAC5B,SAAS,OAAY;AACnB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,UAAU,MAAM,OAAO,GAAG,CAAC;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,MAAa,YAAY,IAAY;AACnC,QAAI;AACF,YAAM,OAAO,MAAM,KAAK,YAAY,YAAY,EAAE;AAClD,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,YAAM,IAAI,MAAM,UAAU,MAAM,OAAO,EAAE;AAAA,IAC3C;AAAA,EACF;AAAA,EAEA,MAAa,WAAW,IAAY;AAClC,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,YAAY,WAAW,EAAE;AACnD,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,YAAM,IAAI,MAAM,UAAU,MAAM,OAAO,EAAE;AAAA,IAC3C;AAAA,EACF;AAEF;AAEA,IAAO,0BAAQ;;;AJ9Cf,IAAM,YAAN,MAAgB;AAAA,EACP,OAAO;AAAA,EACP,SAAS,eAAAC,QAAQ,OAAO;AAAA,EACxB,iBAAiB,IAAI,wBAAe;AAAA,EAE3C,cAAc;AACZ,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEQ,mBAAmB;AACzB,SAAK,OACF,MAAM,GAAG,KAAK,IAAI,EAAE,EACpB,IAAI,KAAK,eAAe,UAAU,EAClC,KAAK,KAAK,eAAe,UAAU;AAAA,EACxC;AACF;AAEA,IAAO,qBAAQ;;;ADlBf,IAAM,WAAW,YAAY;AAE3B,QAAM,UAAM,gBAAAC,SAAQ;AACpB,QAAM,OAAO;AAEb,QAAM,YAAY,IAAI,mBAAU;AAEhC,MAAI,IAAI,KAAK,UAAU,MAAM;AAE7B,MAAI,OAAO,MAAM,MAAM;AACrB,YAAQ,IAAI,6BAA6B,IAAI,EAAE;AAAA,EACjD,CAAC;AACH;AAEA,SAAS;","names":["import_express","import_sequelize","express","express"]}